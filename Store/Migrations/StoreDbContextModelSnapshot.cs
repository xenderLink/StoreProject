// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Store.Data;

#nullable disable

namespace Store.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Store.Models.CartLine", b =>
                {
                    b.Property<long?>("orderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<long?>("producId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("orderId", "producId");

                    b.HasIndex("producId");

                    b.ToTable("cartline");
                });

            modelBuilder.Entity("Store.Models.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("categoryId"));

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("category");

                    b.HasKey("categoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Store.Models.ChildCategory", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("typeId"));

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<int>("categoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("typeId");

                    b.HasIndex("categoryId");

                    b.ToTable("childs");
                });

            modelBuilder.Entity("Store.Models.Image", b =>
                {
                    b.Property<long>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("imageId"));

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("imageId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Store.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderId"));

                    b.Property<bool>("Shipped")
                        .HasColumnType("boolean")
                        .HasColumnName("shipped");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Store.Models.Product", b =>
                {
                    b.Property<long>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("productId"));

                    b.Property<decimal?>("discount")
                        .HasColumnType("numeric");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<decimal?>("price")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<string>("productDescription")
                        .HasColumnType("json")
                        .HasColumnName("description");

                    b.Property<short?>("quantity")
                        .HasColumnType("smallint");

                    b.Property<string>("sku")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SKU");

                    b.Property<int>("typeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("productId");

                    b.HasIndex("typeId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Store.Models.productImage", b =>
                {
                    b.Property<long>("productId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<long>("imageId")
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    b.HasKey("productId", "imageId");

                    b.HasIndex("imageId");

                    b.ToTable("product_images");
                });

            modelBuilder.Entity("Store.Models.CartLine", b =>
                {
                    b.HasOne("Store.Models.Order", "Order")
                        .WithMany("Cart")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.Product", "Product")
                        .WithMany("Lines")
                        .HasForeignKey("producId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Models.ChildCategory", b =>
                {
                    b.HasOne("Store.Models.Category", "category")
                        .WithMany("childs")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("Store.Models.Product", b =>
                {
                    b.HasOne("Store.Models.ChildCategory", "type")
                        .WithMany("products")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("type");
                });

            modelBuilder.Entity("Store.Models.productImage", b =>
                {
                    b.HasOne("Store.Models.Image", "Image")
                        .WithMany("ProductImages")
                        .HasForeignKey("imageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Models.Category", b =>
                {
                    b.Navigation("childs");
                });

            modelBuilder.Entity("Store.Models.ChildCategory", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("Store.Models.Image", b =>
                {
                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Store.Models.Order", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Store.Models.Product", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
